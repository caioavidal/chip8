using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Text;

namespace Chip8.CPU
{
    public class Fonts
    {
        public static IImmutableDictionary<byte, byte[]> All = new Dictionary<byte, byte[]>
        {
            { 0, new byte[]{ 0xF0, 0x90, 0x90, 0x90, 0xF0 } },
            { 1, new byte[]{ 0x20, 0x60, 0x20, 0x20, 0x70 } },
            { 2, new byte[]{ 0xF0, 0x10, 0xF0, 0x80, 0xF0 } },
            { 3, new byte[]{ 0xF0, 0x10, 0xF0, 0x10, 0xF0 } },
            { 4, new byte[]{ 0x90, 0x90, 0xF0, 0x10, 0x10 } },
            { 5, new byte[]{ 0xF0, 0x80, 0xF0, 0x10, 0xF0 } },
            { 6, new byte[]{ 0xF0, 0x80, 0xF0, 0x90, 0xF0 } },
            { 7, new byte[]{ 0xF0, 0x10, 0x20, 0x40, 0x40 } },
            { 8, new byte[]{ 0xF0, 0x90, 0xF0, 0x90, 0xF0 } },
            { 9, new byte[]{ 0xF0, 0x90, 0xF0, 0x10, 0xF0 } },
            { 0xA, new byte[]{ 0xF0, 0x90, 0xF0, 0x90, 0x90 } },
            { 0xB, new byte[]{ 0xE0, 0x90, 0xE0, 0x90, 0xE0 } },
            { 0xC, new byte[]{ 0xF0, 0x80, 0x80, 0x80, 0xF0 } },
            { 0xD, new byte[]{ 0xE0, 0x90, 0x90, 0x90, 0xE0 } },
            { 0xE, new byte[]{ 0xF0, 0x80, 0xF0, 0x80, 0xF0 } },
            { 0xF, new byte[]{ 0xF0, 0x80, 0xF0, 0x80, 0x80 } },
        }.ToImmutableDictionary();
    }
}
